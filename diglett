#!/usr/bin/env python
"""
Diglett

Usage:
    diglett tunnel <name> [<localport>]
    diglett close <name>
    diglett add <name> <ip> <port> [<localport>]
    diglett ls

Options:
    tunnel - create an SSH tunnel
    close - close an SSH tunnel by name
    add - add a new tunnel configuration
    ls - list tunnels
    name - name identifier for tunnel
    ip - remote host port
    port - port to tunnel to
"""


import subprocess
import psutil
import docopt


configs = {
    "jenkins": {
        "hostname": "jenkins",
        "user": "sam",
        "port": 8080,
        "localport": 8080,
        "uid": "90ebb79f8d9342248ac938cca31b67fe"
    },
    "adr-client": {
        "hostname": "dev-services",
        "user": "gi",
        "port": "8000",
        "localport": "8000",
        "uid": "5529d8a7e6cd49fbad26f57f8a3469af"
    },
    "adr-server": {
        "hostname": "dev-services",
        "user": "gi",
        "port": "5000",
        "localport": "5000",
        "uid": "b72ef7d47fae4287acb23b574f242b1e"
    }
}


def tunnel(name, localport=None):
    conf = dict(configs[name].items())
    if localport is not None:
        conf['localport'] = localport
    proc = subprocess.Popen(['ssh',
                             '-f',
                             '{user}@{hostname}'.format(**conf),
                             '-L',
                             '{localport}:localhost:{port}'.format(**conf),
                             '-N',
                             conf['uid']])
    print "Tunnel opened to {} on local port {}".format(name, conf['localport'])
    return


def close(name):
    conf = configs[name]
    tunnel_proc = None
    for proc in iter_proc():
        cmdline = proc.cmdline()
        if (isinstance(cmdline, list) and
                len(cmdline) and cmdline[-1] == conf['uid']):
            tunnel_proc = proc
    try:
        tunnel_proc.kill()
    except AttributeError:
        print "Tunnel {} not open".format(name)


def list_tunnels():
    uid_name_lookup = {conf['uid']: confname
                       for confname, conf in configs.iteritems()}
    for proc in iter_proc():
        cmdline = proc.cmdline()
        if ((isinstance(cmdline, list) and
                len(cmdline) and cmdline[-1] in uid_name_lookup)):
            print uid_name_lookup[cmdline[-1]], proc.pid


def iter_proc():
    for proc in psutil.process_iter():
        try:
            proc.cmdline()
        except psutil.Error:
            pass
        else:
            yield proc


def add():
    raise NotImplementedError("Add functionality not implemented")

if __name__ == "__main__":
    args = docopt.docopt(__doc__)
    if args['tunnel']:
        tunnel(args['<name>'], args['<localport>'])
    elif args['close']:
        close(args['<name>'])
    elif args['add']:
        add()
    elif args['ls']:
        list_tunnels()
    else:
        raise NotImplementedError("Mode not implemented")

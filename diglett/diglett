#!/usr/bin/env python
"""
Diglett

Usage:
    diglett tunnel <name> [<localport>] [--webserver|-s]
    diglett close <name>
    diglett add <name> <username> <hostname> <port> [<localport>]
    diglett ls

Options:
    tunnel - create an SSH tunnel
    close - close an SSH tunnel by name
    add - add a new tunnel configuration
    ls - list tunnels
    name - name identifier for tunnel
    username - username on remote host
    hostname - remote host port
    port - port to tunnel to
    --webserver|-s - Open a web server on the remote port
"""
import subprocess
import uuid

import psutil
import docopt
from diglett import configs
"""
TODO:
x JSON save file not configs dict
- allow user to tunnel somewhere that isnt saved
- allow deletion of config option
- allow listing of all configs (extra arg to ls mode)
- auto-complete of config names in command line
- create / close multiple connections in one command
"""

tunnel_configs = configs.load_config()


def tunnel(name, localport, web_server):
    conf = tunnel_configs[name]
    localport = localport or conf["localport"]
    ssh_command = build_ssh_command(conf, localport, web_server)
    proc = subprocess.Popen(ssh_command)
    print "Tunnel opened to {} on local port {}".format(name, localport)
    return


def build_ssh_command(conf, localport, web_server):
    conf = dict(conf.items())
    conf['localport'] = localport

    remote_command = "python -m SimpleHTTPServer {}".format(
        conf['port']) if web_server else "-N"

    ssh_command = ['ssh', '-o', 'TCPKeepAlive=yes', '-o', 'ServerAliveInterval=50',
                   '-f', '{user}@{hostname}'.format(**conf), '-L',
                   '{localport}:localhost:{port}'.format(**conf),
                   remote_command, conf['uid']]
    return ssh_command


def close(name):
    conf = tunnel_configs[name]
    tunnel_proc = None
    for proc in iter_proc():
        cmdline = proc.cmdline()
        if (isinstance(cmdline, list) and
                len(cmdline) and cmdline[-1] == conf['uid']):
            tunnel_proc = proc
    try:
        tunnel_proc.kill()
    except AttributeError:
        print "Tunnel {} not open".format(name)


def list_tunnels():
    uid_name_lookup = {conf['uid']: confname
                       for confname, conf in tunnel_configs.iteritems()}
    for proc in iter_proc():
        cmdline = proc.cmdline()
        if ((isinstance(cmdline, list) and
                len(cmdline) and cmdline[-1] in uid_name_lookup)):
            print uid_name_lookup[cmdline[-1]], proc.pid


def iter_proc():
    for proc in psutil.process_iter():
        try:
            proc.cmdline()
        except psutil.Error:
            pass
        else:
            yield proc


def add(name, username, hostname, port, localport):
    conf = {
        name: {
            "hostname": hostname,
            "localport": localport if localport is not None else port,
            "port": port,
            "uid": uuid.uuid4().hex,
            "user": username
        }
    }
    configs.add_to_config(conf, tunnel_configs)


if __name__ == "__main__":
    args = docopt.docopt(__doc__)
    if args['tunnel']:
        tunnel(args['<name>'], args['<localport>'], args['--webserver'])
    elif args['close']:
        close(args['<name>'])
    elif args['add']:
        add(args['<name>'], args['<username>'], args['<hostname>'],
            args['<port>'], args['<localport>'])
    elif args['ls']:
        list_tunnels()
    else:
        raise NotImplementedError("Mode not implemented")
